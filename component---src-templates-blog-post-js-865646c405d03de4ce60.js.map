{"version":3,"file":"component---src-templates-blog-post-js-865646c405d03de4ce60.js","mappings":"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","sources":["webpack://siannas-blog/./src/components/bio.js","webpack://siannas-blog/./src/components/layout.js","webpack://siannas-blog/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack://siannas-blog/./src/components/sidebar.js","webpack://siannas-blog/./src/templates/blog-post.js"],"sourcesContent":["/**\r\n * Bio component that queries for data\r\n * with Gatsby's useStaticQuery component\r\n *\r\n * See: https://www.gatsbyjs.com/docs/use-static-query/\r\n */\r\n\r\nimport * as React from \"react\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\nimport { StaticImage } from \"gatsby-plugin-image\"\r\n\r\nconst Bio = () => {\r\n  const data = useStaticQuery(graphql`\r\n    query BioQuery {\r\n      site {\r\n        siteMetadata {\r\n          author {\r\n            name\r\n            summary\r\n          }\r\n          social {\r\n            twitter\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\r\n  const author = data.site.siteMetadata?.author\r\n  const social = data.site.siteMetadata?.social\r\n\r\n  return (\r\n    <div className=\"bio\">\r\n      <StaticImage\r\n        className=\"bio-avatar\"\r\n        layout=\"fixed\"\r\n        formats={[\"AUTO\", \"WEBP\", \"AVIF\"]}\r\n        src=\"../images/profile-pic.jpg\"\r\n        width={50}\r\n        height={50}\r\n        quality={95}\r\n        alt=\"Profile picture\"\r\n      />\r\n      {author?.name && (\r\n        <p>\r\n          Written by <strong>{author.name}</strong> {author?.summary || null}\r\n          {` `}\r\n          <a href={`https://twitter.com/${social?.twitter || ``}`}>\r\n            You should follow them on Twitter\r\n          </a>\r\n        </p>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Bio\r\n","import * as React from \"react\"\r\nimport { Link } from \"gatsby\"\r\n\r\nconst Layout = ({ location, title, children }) => {\r\n  const rootPath = `${__PATH_PREFIX__}/`\r\n  const isRootPath = location.pathname === rootPath\r\n  let header\r\n\r\n  if (isRootPath) {\r\n    header = (\r\n      <h1 className=\"main-heading\">\r\n        <Link to=\"/\">{title}</Link>\r\n      </h1>\r\n    )\r\n  } else {\r\n    header = (\r\n      <Link className=\"header-link-home\" to=\"/\">\r\n        {title}\r\n      </Link>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\r\n      <header className=\"global-header\">{header}</header>\r\n      <main>{children}</main>\r\n      <footer>\r\n        Â© {new Date().getFullYear()}, Built with\r\n        {` `}\r\n        <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\r\n      </footer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Layout\r\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import * as React from \"react\"\r\nimport { StaticQuery, graphql, Link } from \"gatsby\"\r\n\r\n//convert query result to dictionary object\r\nconst CategoriesToDict = (obj) => {\r\n  let result = {}\r\n  obj.forEach(category => {\r\n    result[category.node.id] = {\r\n      name: category.node.internal.contentDigest,\r\n      children: category.node.children.length ? category.node.children : null,\r\n      parent: category.node.parent\r\n    }\r\n  });\r\n  return result\r\n}\r\n\r\nconst SidebarPostList = ({data, ...props}) => {\r\n  let useUlTag = props.withUlTag || true\r\n  if(data.length && useUlTag){\r\n    return (<ul>\r\n      {data.map(post=> <li key={post.fields.slug}>\r\n            <Link to={post.fields.slug}>{post.frontmatter.title}</Link>\r\n          </li>)}\r\n    </ul>)\r\n  }else if(data.length){\r\n    return (<>\r\n      {data.map(post=> <li key={post.fields.slug}>\r\n            <Link to={post.fields.slug}>{post.frontmatter.title}</Link>\r\n          </li>)}\r\n    </>)\r\n  }else{\r\n    return (<></>)\r\n  }\r\n}\r\n\r\n//category renderer using recursive method\r\nconst CreateCategoryElement = ({posts, categories, childId, ...props}) => {\r\n  let [show, setShow] = React.useState(false);\r\n\r\n  let c = categories[childId]\r\n  let filteredPost = posts.filter(post => post.frontmatter.category===c.name)\r\n  if(c.children !== null){      \r\n    return (<>\r\n      <Link to=\"#\" className=\"item\" onClick={()=>setShow(!show)}><i className={\"angle icon \" + (show?\"down\":\"left\")  }></i>{c.name}</Link>\r\n      <div className={show ? \"ui my-collapsible show\" : \"ui my-collapsible\"}>\r\n        {c.children.map(child => <CreateCategoryElement categories={categories} posts={posts} key={child.id} childId={child.id} />)}\r\n        <SidebarPostList withUlTag={false} data={filteredPost} />\r\n      </div>\r\n    </>)\r\n  }else{\r\n    return (<><Link to=\"#\" className=\"item\">{c.name}</Link><SidebarPostList data={filteredPost} /></>)\r\n  }\r\n}\r\n\r\nconst SidebarContent = ({data}) => {\r\n  let categories = CategoriesToDict(data.allCategory.edges)\r\n  let posts = data.allMarkdownRemark.nodes\r\n\r\n  return (\r\n    <div className=\"left fixed vertical menu ui large\">\r\n      <div className=\"ui dividing large header my-primary\" style={{padding: '14px 17px'}}>Siannas Blog</div>\r\n      <div >\r\n        {Object.keys(categories).map(id => !categories[id].parent ? <CreateCategoryElement categories={categories} posts={posts} key={id} childId={id} /> : '' )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Sidebar = ( props ) => {\r\n  // Get all markdown blog posts sorted by date\r\n  return (\r\n    <StaticQuery\r\n      query={graphql`\r\n        query {\r\n          allCategory(sort: {fields: name}){\r\n            edges {\r\n              node {\r\n                id\r\n                children {\r\n                  id\r\n                }\r\n                parent {\r\n                  id\r\n                }\r\n                internal {\r\n                  contentDigest\r\n                }\r\n              }\r\n            }\r\n          }\r\n          allMarkdownRemark {\r\n            nodes {\r\n              id\r\n              fields {\r\n                slug\r\n              }\r\n              frontmatter {\r\n                title\r\n                category\r\n              }\r\n            }\r\n          }\r\n        }\r\n      `}\r\n      render={data => <SidebarContent data={data} {...props} />}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Sidebar","import * as React from \"react\"\r\nimport { Link, graphql } from \"gatsby\"\r\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\r\n\r\nimport Bio from \"../components/bio\"\r\nimport Layout from \"../components/layout\"\r\nimport Sidebar from \"../components/sidebar\"\r\nimport Seo from \"../components/seo\"\r\n\r\nconst BlogPostTemplate = ({ data, location }) => {\r\n  const post = data.markdownRemark\r\n  const siteTitle = data.site.siteMetadata?.title || `Title`\r\n  const { previous, next } = data\r\n  const featuredImage = data.featuredImage ? getImage(data.featuredImage) : null\r\n\r\n  return (\r\n    <Layout location={location} title={siteTitle}>\r\n      <Sidebar/>\r\n      <Seo\r\n        title={post.frontmatter.title}\r\n        description={post.frontmatter.description || post.excerpt}\r\n      />\r\n      <article\r\n        className=\"blog-post\"\r\n        itemScope\r\n        itemType=\"http://schema.org/Article\"\r\n      >\r\n        <header>\r\n          {featuredImage ? <GatsbyImage image={featuredImage} alt=\"featuredImage\" /> : ''}\r\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\r\n          <p>{post.frontmatter.date}</p>\r\n        </header>\r\n        <section\r\n          dangerouslySetInnerHTML={{ __html: post.html }}\r\n          itemProp=\"articleBody\"\r\n        />\r\n        <hr />\r\n        <p className=\"tags\" id=\"tags\">Tags: \r\n          {!post.frontmatter.tags ? '-' : post.frontmatter.tags.map(tag => {\r\n            return (<Link to=\"#tags\" key={tag}>{tag}</Link>)\r\n          })}\r\n        </p>\r\n        <footer>\r\n          <Bio />\r\n        </footer>\r\n      </article>\r\n      <nav className=\"blog-post-nav\">\r\n        <ul\r\n          style={{\r\n            display: `flex`,\r\n            flexWrap: `wrap`,\r\n            justifyContent: `space-between`,\r\n            listStyle: `none`,\r\n            padding: 0,\r\n          }}\r\n        >\r\n          <li>\r\n            {previous && (\r\n              <Link to={previous.fields.slug} rel=\"prev\">\r\n                â {previous.frontmatter.title}\r\n              </Link>\r\n            )}\r\n          </li>\r\n          <li>\r\n            {next && (\r\n              <Link to={next.fields.slug} rel=\"next\">\r\n                {next.frontmatter.title} â\r\n              </Link>\r\n            )}\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default BlogPostTemplate\r\n\r\nexport const pageQuery = graphql`\r\n  query BlogPostBySlug(\r\n    $id: String!\r\n    $previousPostId: String\r\n    $nextPostId: String\r\n    $dir: String\r\n  ) {\r\n    featuredImage: file(relativeDirectory: {eq: $dir },name: {eq:\"featured-image\"}) {\r\n      id\r\n      name\r\n      relativeDirectory\r\n\t\t\tchildImageSharp {\r\n       gatsbyImageData(\r\n         width: 1200\r\n         formats: [AUTO]\r\n       )\r\n     }\r\n    }\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n    markdownRemark(id: { eq: $id }) {\r\n      id\r\n      excerpt(pruneLength: 160)\r\n      html\r\n      frontmatter {\r\n        title\r\n        date(formatString: \"MMMM DD, YYYY\")\r\n        description\r\n        category\r\n        tags\r\n      }\r\n    }\r\n    previous: markdownRemark(id: { eq: $previousPostId }) {\r\n      fields {\r\n        slug\r\n      }\r\n      frontmatter {\r\n        title\r\n      }\r\n    }\r\n    next: markdownRemark(id: { eq: $nextPostId }) {\r\n      fields {\r\n        slug\r\n      }\r\n      frontmatter {\r\n        title\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"names":["data","useStaticQuery","author","site","siteMetadata","social","className","S","layout","formats","src","width","height","quality","alt","name","summary","href","twitter","header","location","title","children","isRootPath","pathname","Link","to","Date","getFullYear","_objectWithoutPropertiesLoose","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","SidebarPostList","useUlTag","withUlTag","map","post","fields","slug","frontmatter","CreateCategoryElement","posts","categories","childId","React","show","setShow","c","filteredPost","filter","category","onClick","child","id","SidebarContent","obj","result","allCategory","edges","forEach","node","internal","contentDigest","parent","allMarkdownRemark","nodes","style","padding","props","StaticQuery","query","render","markdownRemark","siteTitle","previous","next","featuredImage","getImage","description","excerpt","itemScope","itemType","G","image","itemProp","date","dangerouslySetInnerHTML","__html","html","tags","tag","display","flexWrap","justifyContent","listStyle","rel"],"sourceRoot":""}