{"version":3,"file":"component---src-pages-index-js-a9945735a96d2f137c93.js","mappings":"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","sources":["webpack://siannas-blog/./src/components/bio.js","webpack://siannas-blog/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack://siannas-blog/./src/components/sidebar.js","webpack://siannas-blog/./src/pages/index.js"],"sourcesContent":["/**\r\n * Bio component that queries for data\r\n * with Gatsby's useStaticQuery component\r\n *\r\n * See: https://www.gatsbyjs.com/docs/use-static-query/\r\n */\r\n\r\nimport * as React from \"react\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\nimport { StaticImage } from \"gatsby-plugin-image\"\r\n\r\nconst Bio = () => {\r\n  const data = useStaticQuery(graphql`\r\n    query BioQuery {\r\n      site {\r\n        siteMetadata {\r\n          author {\r\n            name\r\n            summary\r\n          }\r\n          social {\r\n            twitter\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\r\n  const author = data.site.siteMetadata?.author\r\n  const social = data.site.siteMetadata?.social\r\n\r\n  return (\r\n    <div className=\"bio\">\r\n      <StaticImage\r\n        className=\"bio-avatar\"\r\n        layout=\"fixed\"\r\n        formats={[\"AUTO\", \"WEBP\", \"AVIF\"]}\r\n        src=\"../images/profile-pic.jpg\"\r\n        width={50}\r\n        height={50}\r\n        quality={95}\r\n        alt=\"Profile picture\"\r\n      />\r\n      {author?.name && (\r\n        <p>\r\n          Written by <strong>{author.name}</strong> {author?.summary || null}\r\n          {` `}\r\n          <a href={`https://twitter.com/${social?.twitter || ``}`}>\r\n            You should follow them on Twitter\r\n          </a>\r\n        </p>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Bio\r\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import * as React from \"react\"\r\nimport { StaticQuery, graphql, Link } from \"gatsby\"\r\n\r\n//convert query result to dictionary object\r\nconst CategoriesToDict = (obj) => {\r\n  let result = {}\r\n  obj.forEach(category => {\r\n    result[category.node.id] = {\r\n      name: category.node.internal.contentDigest,\r\n      children: category.node.children.length ? category.node.children : null,\r\n      parent: category.node.parent\r\n    }\r\n  });\r\n  return result\r\n}\r\n\r\nconst SidebarPostList = ({data, ...props}) => {\r\n  let useUlTag = props.withUlTag || true\r\n  if(data.length && useUlTag){\r\n    return (<ul>\r\n      {data.map(post=> <li key={post.fields.slug}>\r\n            <Link to={post.fields.slug}>{post.frontmatter.title}</Link>\r\n          </li>)}\r\n    </ul>)\r\n  }else if(data.length){\r\n    return (<>\r\n      {data.map(post=> <li key={post.fields.slug}>\r\n            <Link to={post.fields.slug}>{post.frontmatter.title}</Link>\r\n          </li>)}\r\n    </>)\r\n  }else{\r\n    return (<></>)\r\n  }\r\n}\r\n\r\n//category renderer using recursive method\r\nconst CreateCategoryElement = ({posts, categories, childId, ...props}) => {\r\n  let [show, setShow] = React.useState(false);\r\n\r\n  let c = categories[childId]\r\n  let filteredPost = posts.filter(post => post.frontmatter.category===c.name)\r\n  if(c.children !== null){      \r\n    return (<>\r\n      <Link to=\"#\" className=\"item\" onClick={()=>setShow(!show)}><i className={\"angle icon \" + (show?\"down\":\"left\")  }></i>{c.name}</Link>\r\n      <div className={show ? \"ui my-collapsible show\" : \"ui my-collapsible\"}>\r\n        {c.children.map(child => <CreateCategoryElement categories={categories} posts={posts} key={child.id} childId={child.id} />)}\r\n        <SidebarPostList withUlTag={false} data={filteredPost} />\r\n      </div>\r\n    </>)\r\n  }else{\r\n    return (<><Link to=\"#\" className=\"item\">{c.name}</Link><SidebarPostList data={filteredPost} /></>)\r\n  }\r\n}\r\n\r\nconst SidebarContent = ({data}) => {\r\n  let categories = CategoriesToDict(data.allCategory.edges)\r\n  let posts = data.allMarkdownRemark.nodes\r\n\r\n  return (\r\n    <div className=\"left fixed vertical menu ui large\">\r\n      <div className=\"ui dividing large header my-primary\" style={{padding: '14px 17px'}}>Siannas Blog</div>\r\n      <div >\r\n        {Object.keys(categories).map(id => !categories[id].parent ? <CreateCategoryElement categories={categories} posts={posts} key={id} childId={id} /> : '' )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Sidebar = ( props ) => {\r\n  // Get all markdown blog posts sorted by date\r\n  return (\r\n    <StaticQuery\r\n      query={graphql`\r\n        query {\r\n          allCategory(sort: {fields: name}){\r\n            edges {\r\n              node {\r\n                id\r\n                children {\r\n                  id\r\n                }\r\n                parent {\r\n                  id\r\n                }\r\n                internal {\r\n                  contentDigest\r\n                }\r\n              }\r\n            }\r\n          }\r\n          allMarkdownRemark {\r\n            nodes {\r\n              id\r\n              fields {\r\n                slug\r\n              }\r\n              frontmatter {\r\n                title\r\n                category\r\n              }\r\n            }\r\n          }\r\n        }\r\n      `}\r\n      render={data => <SidebarContent data={data} {...props} />}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Sidebar","import * as React from \"react\"\r\nimport { Link, graphql } from \"gatsby\"\r\n\r\nimport Bio from \"../components/bio\"\r\nimport Layout from \"../components/wp-layout\"\r\nimport Sidebar from \"../components/sidebar\"\r\nimport Seo from \"../components/seo\"\r\n// import \"semantic-ui-less/semantic.less\"\r\nimport \"../custom.scss\"\r\n\r\nconst BlogIndex = ({ data, location }) => {\r\n  const siteTitle = `Title`\r\n  // const siteTitle = data.site.siteMetadata?.title || `Title`\r\n  const posts = data.allWpPost.edges\r\n  \r\n  if (posts.length === 0) {\r\n    return (\r\n      <Layout location={location} title={siteTitle}>\r\n        <Seo title=\"All posts\" />\r\n        <Bio />\r\n        <p>\r\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\r\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\r\n          gatsby-config.js).\r\n        </p>\r\n      </Layout>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <Layout location={location} title={siteTitle}>\r\n      {/* <Sidebar/>     */}\r\n      <Seo title=\"All posts\" />\r\n      {/* <Bio /> */}\r\n      <ol style={{ listStyle: `none` }}>\r\n        {posts.map(({ previous, post, next }) => {\r\n          const title = post.title\r\n\r\n          return (\r\n            <li key={post.uri}>\r\n              <article\r\n                className=\"post-list-item\"\r\n                itemScope\r\n                itemType=\"http://schema.org/Article\"\r\n              >\r\n                <header>\r\n                  <h2>\r\n                    <Link to={post.uri} itemProp=\"url\">\r\n                      <span itemProp=\"headline\">{title}</span>\r\n                    </Link>\r\n                  </h2>\r\n                  <small>{post.date}</small>\r\n                </header>\r\n                <section>\r\n                  <p\r\n                    dangerouslySetInnerHTML={{\r\n                      __html: post.excerpt,\r\n                    }}\r\n                    itemProp=\"description\"\r\n                  />\r\n                </section>\r\n              </article>\r\n            </li>\r\n          )\r\n        })}\r\n      </ol>\r\n    </Layout>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default BlogIndex\r\n\r\n// export const pageQuery = graphql`\r\n//   query {\r\n//     site {\r\n//       siteMetadata {\r\n//         title\r\n//       }\r\n//     }\r\n//     allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\r\n//       nodes {\r\n//         excerpt\r\n//         fields {\r\n//           slug\r\n//         }\r\n//         frontmatter {\r\n//           date(formatString: \"MMMM DD, YYYY\")\r\n//           title\r\n//           description\r\n//         }\r\n//       }\r\n//     }\r\n//   }\r\n// `\r\n\r\nexport const pageQuery = graphql`\r\n  query {\r\n    # Query all WordPress blog posts sorted by date\r\n    allWpPost(sort: { fields: [date], order: DESC }) {\r\n      edges {\r\n        previous {\r\n          id\r\n        }\r\n        # note: this is a GraphQL alias. It renames \"node\" to \"post\" for this query\r\n        # We're doing this because this \"node\" is a post! It makes our code more readable further down the line.\r\n        post: node {\r\n          __typename\r\n          excerpt\r\n          title\r\n          date(formatString: \"MMMM DD, YYYY\")\r\n          id\r\n          uri\r\n        }\r\n        next {\r\n          id\r\n        }\r\n      }\r\n    }\r\n  }\r\n`"],"names":["data","useStaticQuery","author","site","siteMetadata","social","className","S","layout","formats","src","width","height","quality","alt","name","summary","href","twitter","_objectWithoutPropertiesLoose","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","SidebarPostList","useUlTag","withUlTag","map","post","fields","slug","Link","to","frontmatter","title","CreateCategoryElement","posts","categories","childId","React","show","setShow","c","filteredPost","filter","category","children","onClick","child","id","SidebarContent","obj","result","allCategory","edges","forEach","node","internal","contentDigest","parent","allMarkdownRemark","nodes","style","padding","props","StaticQuery","query","render","location","siteTitle","allWpPost","listStyle","previous","next","uri","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","excerpt"],"sourceRoot":""}